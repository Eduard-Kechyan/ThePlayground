//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""HomingMissile"",
            ""id"": ""a556314f-7d65-4a6c-8e5a-7feb29e984e1"",
            ""actions"": [
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""64cb251a-34c7-4602-90a0-db229e2ae144"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""e6de9a74-bb6b-451a-b3f8-75beb2efc39d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""b28fa883-7ef7-4738-94af-f2364d23a912"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""c97ab445-dcdb-4e2a-bee3-1b5a7958888f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""2c41e7a9-1121-44ec-b750-eda17a743f6e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""84bc7b6c-cfbe-4d5b-b8d1-fc62ee40fa9c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bd110ef-fb69-40be-97b8-af1a1f6a5115"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2ca8ecf4-49e3-4b29-a464-22a8854a1f54"",
                    ""path"": ""1DAxis(minValue=-360,maxValue=360)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0abfd41f-8d73-4aa0-b85b-d182820ae1f4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5dc19465-6343-4dff-bcb0-8b4de3c3507e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""890a2f51-b954-47e0-8286-bcb1684eb064"",
                    ""path"": ""1DAxis(minValue=-360,maxValue=360)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""28089699-4775-4b3f-a9d5-b15a7d963187"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d3b89152-9fa3-47cb-a3ac-cf87788e249c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""01941b12-14e7-403f-8762-612119a4069c"",
                    ""path"": ""1DAxis(minValue=-360,maxValue=360)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8995b3a8-7720-48f3-b579-8e972310beee"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bc435e41-7ce5-4e3f-bef2-1b312bb6fca7"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""VectorsAndMore"",
            ""id"": ""679cba64-a25e-496d-91a1-c48c562cc897"",
            ""actions"": [
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""6f83a596-c4d2-4dad-be53-416d2e999ce7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""3d17e0cd-1de8-4a77-a061-6dd664443cd4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""d8339f46-ec76-4b8e-9453-4ce87a70b23b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""bd88feda-34bc-4ede-8c67-578f374fee1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e132b17-4f7b-4702-9f33-ba32596b1121"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61f86bf2-ed6a-48cb-a65f-abb363ba4205"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95ade98b-e718-4ae1-af07-00b76da237dd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c85914a-7008-4790-b83b-ed70b14d3b53"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""DefaultControlScheme"",
            ""bindingGroup"": ""DefaultControlScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // HomingMissile
        m_HomingMissile = asset.FindActionMap("HomingMissile", throwIfNotFound: true);
        m_HomingMissile_Boost = m_HomingMissile.FindAction("Boost", throwIfNotFound: true);
        m_HomingMissile_Reset = m_HomingMissile.FindAction("Reset", throwIfNotFound: true);
        m_HomingMissile_Yaw = m_HomingMissile.FindAction("Yaw", throwIfNotFound: true);
        m_HomingMissile_Pitch = m_HomingMissile.FindAction("Pitch", throwIfNotFound: true);
        m_HomingMissile_Roll = m_HomingMissile.FindAction("Roll", throwIfNotFound: true);
        // VectorsAndMore
        m_VectorsAndMore = asset.FindActionMap("VectorsAndMore", throwIfNotFound: true);
        m_VectorsAndMore_MoveUp = m_VectorsAndMore.FindAction("MoveUp", throwIfNotFound: true);
        m_VectorsAndMore_MoveDown = m_VectorsAndMore.FindAction("MoveDown", throwIfNotFound: true);
        m_VectorsAndMore_MoveLeft = m_VectorsAndMore.FindAction("MoveLeft", throwIfNotFound: true);
        m_VectorsAndMore_MoveRight = m_VectorsAndMore.FindAction("MoveRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HomingMissile
    private readonly InputActionMap m_HomingMissile;
    private List<IHomingMissileActions> m_HomingMissileActionsCallbackInterfaces = new List<IHomingMissileActions>();
    private readonly InputAction m_HomingMissile_Boost;
    private readonly InputAction m_HomingMissile_Reset;
    private readonly InputAction m_HomingMissile_Yaw;
    private readonly InputAction m_HomingMissile_Pitch;
    private readonly InputAction m_HomingMissile_Roll;
    public struct HomingMissileActions
    {
        private @InputActions m_Wrapper;
        public HomingMissileActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Boost => m_Wrapper.m_HomingMissile_Boost;
        public InputAction @Reset => m_Wrapper.m_HomingMissile_Reset;
        public InputAction @Yaw => m_Wrapper.m_HomingMissile_Yaw;
        public InputAction @Pitch => m_Wrapper.m_HomingMissile_Pitch;
        public InputAction @Roll => m_Wrapper.m_HomingMissile_Roll;
        public InputActionMap Get() { return m_Wrapper.m_HomingMissile; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HomingMissileActions set) { return set.Get(); }
        public void AddCallbacks(IHomingMissileActions instance)
        {
            if (instance == null || m_Wrapper.m_HomingMissileActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HomingMissileActionsCallbackInterfaces.Add(instance);
            @Boost.started += instance.OnBoost;
            @Boost.performed += instance.OnBoost;
            @Boost.canceled += instance.OnBoost;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
            @Yaw.started += instance.OnYaw;
            @Yaw.performed += instance.OnYaw;
            @Yaw.canceled += instance.OnYaw;
            @Pitch.started += instance.OnPitch;
            @Pitch.performed += instance.OnPitch;
            @Pitch.canceled += instance.OnPitch;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
        }

        private void UnregisterCallbacks(IHomingMissileActions instance)
        {
            @Boost.started -= instance.OnBoost;
            @Boost.performed -= instance.OnBoost;
            @Boost.canceled -= instance.OnBoost;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
            @Yaw.started -= instance.OnYaw;
            @Yaw.performed -= instance.OnYaw;
            @Yaw.canceled -= instance.OnYaw;
            @Pitch.started -= instance.OnPitch;
            @Pitch.performed -= instance.OnPitch;
            @Pitch.canceled -= instance.OnPitch;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
        }

        public void RemoveCallbacks(IHomingMissileActions instance)
        {
            if (m_Wrapper.m_HomingMissileActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHomingMissileActions instance)
        {
            foreach (var item in m_Wrapper.m_HomingMissileActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HomingMissileActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HomingMissileActions @HomingMissile => new HomingMissileActions(this);

    // VectorsAndMore
    private readonly InputActionMap m_VectorsAndMore;
    private List<IVectorsAndMoreActions> m_VectorsAndMoreActionsCallbackInterfaces = new List<IVectorsAndMoreActions>();
    private readonly InputAction m_VectorsAndMore_MoveUp;
    private readonly InputAction m_VectorsAndMore_MoveDown;
    private readonly InputAction m_VectorsAndMore_MoveLeft;
    private readonly InputAction m_VectorsAndMore_MoveRight;
    public struct VectorsAndMoreActions
    {
        private @InputActions m_Wrapper;
        public VectorsAndMoreActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveUp => m_Wrapper.m_VectorsAndMore_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_VectorsAndMore_MoveDown;
        public InputAction @MoveLeft => m_Wrapper.m_VectorsAndMore_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_VectorsAndMore_MoveRight;
        public InputActionMap Get() { return m_Wrapper.m_VectorsAndMore; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VectorsAndMoreActions set) { return set.Get(); }
        public void AddCallbacks(IVectorsAndMoreActions instance)
        {
            if (instance == null || m_Wrapper.m_VectorsAndMoreActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VectorsAndMoreActionsCallbackInterfaces.Add(instance);
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
        }

        private void UnregisterCallbacks(IVectorsAndMoreActions instance)
        {
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
        }

        public void RemoveCallbacks(IVectorsAndMoreActions instance)
        {
            if (m_Wrapper.m_VectorsAndMoreActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVectorsAndMoreActions instance)
        {
            foreach (var item in m_Wrapper.m_VectorsAndMoreActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VectorsAndMoreActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VectorsAndMoreActions @VectorsAndMore => new VectorsAndMoreActions(this);
    private int m_DefaultControlSchemeSchemeIndex = -1;
    public InputControlScheme DefaultControlSchemeScheme
    {
        get
        {
            if (m_DefaultControlSchemeSchemeIndex == -1) m_DefaultControlSchemeSchemeIndex = asset.FindControlSchemeIndex("DefaultControlScheme");
            return asset.controlSchemes[m_DefaultControlSchemeSchemeIndex];
        }
    }
    public interface IHomingMissileActions
    {
        void OnBoost(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
    }
    public interface IVectorsAndMoreActions
    {
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
    }
}
